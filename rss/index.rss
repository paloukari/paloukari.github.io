<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>HAVE DATA - WILL TRAIN</title><description>The adventures of a Data Scientist who travels the Web working as a mercenary for people who hire him to solve their problems, but he provides his services for free to poor people who need his help</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>HAVE DATA - WILL TRAIN</title><link>http://localhost:2368/</link></image><generator>Ghost 2.31</generator><lastBuildDate>Wed, 25 Sep 2019 21:20:10 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Got Nano, Wanna Code</title><description>&lt;p&gt;So, you just got your Jetson Nano and you're wondering how to get started? &lt;/p&gt;&lt;p&gt;Here's how I setup my development environment rig:&lt;/p&gt;&lt;h2 id="device-setup"&gt;Device Setup&lt;/h2&gt;&lt;p&gt;First, let's start with the device initial setup. To prepare my device, I followed the official &lt;a href="https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro"&gt;getting started guide &lt;/a&gt;from Nvidia. I used a &lt;a href="https://www.amazon.com/SanDisk-128GB-Extreme-microSD-Adapter/dp/B07FCMKK5X/ref=asc_df_B07FCMKK5X/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=309776868400&amp;amp;hvpos=1o1&amp;amp;hvnetw=g&amp;amp;hvrand=8725959158767136122&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=1027744&amp;amp;hvtargid=pla-588455240877&amp;amp;psc=1"&gt;128 GB&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/got-nano-will-code/</link><guid isPermaLink="false">5d7bf22d3694ea005ad2a5f8</guid><dc:creator>Spyros Garyfallos</dc:creator><pubDate>Wed, 25 Sep 2019 20:39:41 GMT</pubDate><media:content url="http://localhost:2368/content/images/2019/09/Jetson-Nano_3QTR-Front_Left_trimmed-1.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2019/09/Jetson-Nano_3QTR-Front_Left_trimmed-1.jpg" alt="Got Nano, Wanna Code"&gt;&lt;p&gt;So, you just got your Jetson Nano and you're wondering how to get started? &lt;/p&gt;&lt;p&gt;Here's how I setup my development environment rig:&lt;/p&gt;&lt;h2 id="device-setup"&gt;Device Setup&lt;/h2&gt;&lt;p&gt;First, let's start with the device initial setup. To prepare my device, I followed the official &lt;a href="https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro"&gt;getting started guide &lt;/a&gt;from Nvidia. I used a &lt;a href="https://www.amazon.com/SanDisk-128GB-Extreme-microSD-Adapter/dp/B07FCMKK5X/ref=asc_df_B07FCMKK5X/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=309776868400&amp;amp;hvpos=1o1&amp;amp;hvnetw=g&amp;amp;hvrand=8725959158767136122&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=1027744&amp;amp;hvtargid=pla-588455240877&amp;amp;psc=1"&gt;128 GB microSD&lt;/a&gt; and a &lt;a href="https://www.amazon.com/5V-4000mA-switching-power-supply/dp/B01LY5TG5Y"&gt;power adapter&lt;/a&gt; to power up my device, along with the &lt;a href="https://www.jetsonhacks.com/2019/04/10/jetson-nano-use-more-power/"&gt;required jumper&lt;/a&gt;. I connected a Dell P2415Q monitor using an HDMI cable and my USB receiver for my Logitech Triathlon keyboard and mouse. My development laptop is a Windows 10 machine.&lt;/p&gt;&lt;h2 id="desktop-sharing"&gt;Desktop Sharing &lt;/h2&gt;&lt;p&gt;The desktop sharing app is broken. Follow &lt;a href="https://blog.hackster.io/getting-started-with-the-nvidia-jetson-nano-developer-kit-43aa7c298797"&gt;this&lt;/a&gt; article to fix it. You can also find instructions there on how to use Microsoft's Remote Desktop.&lt;/p&gt;&lt;h2 id="development-environment"&gt;Development Environment&lt;/h2&gt;&lt;p&gt;The latest trend in the development experience in the software development industry is do your development using &lt;strong&gt;CLIs &lt;/strong&gt;and &lt;strong&gt;code editors&lt;/strong&gt;. I generally enjoy having all moving parts together, or at least in proximity when I'm coding.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; succeeded in combining together a cross-platform code editor, community driven plugins and decent UI/UX for development. But what I really like with Visual Studio Code is the recent &lt;strong&gt;&lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;Remote Development&lt;/a&gt; &lt;/strong&gt;capability that allows you to keep a local UI/UX experience, while working on a remote host or container.&lt;/p&gt;&lt;p&gt;The other thing I like having in my development environment is &lt;strong&gt;idempotency&lt;/strong&gt;: not having to deal with the dependencies of the host. &lt;strong&gt;Containers &lt;/strong&gt;allow me to have multiple dependency configurations on the same host, and moreover, to share code between different hosts. For this reason, in every code sample I present in this blog, I make sure to include the corresponding container.&lt;/p&gt;&lt;h3 id="step-1-remote-development-on-a-jetson-nano"&gt;Step 1: Remote Development on a Jetson Nano&lt;/h3&gt;&lt;p&gt;Because the ARM64 architecture is not officially supported yet, to install&lt;strong&gt; Visual Studio Code&lt;/strong&gt; on your &lt;strong&gt;Jetson Nano&lt;/strong&gt;, for now you'll have to use the &lt;a href="https://code.headmelted.com/"&gt;community binaries&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Installing Visual Studio Code on a Jetson Nano&lt;/strong&gt;&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Bash"&gt;# Start an elevated session
sudo -s

# Install the community repo key
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0CC3FD642696BFC8

# Run the installation script
. &amp;lt;( wget -O - https://code.headmelted.com/installers/apt.sh )
&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;If all goes well, you should get this output:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Bash"&gt;Installation complete!

You can start code at any time by calling "code-oss" within a terminal.

A shortcut should also now be available in your desktop menus (depending on your distribution).&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;Next, you'll need to install the &lt;strong&gt;&lt;a href="https://code.visualstudio.com/insiders/"&gt;Visual Studio Code Insiders&lt;/a&gt; on your host &lt;/strong&gt;and install the &lt;strong&gt;&lt;a href="https://code.visualstudio.com/docs/remote/remote-overview"&gt;Remote Development&lt;/a&gt; &lt;/strong&gt;extension.&lt;/p&gt;&lt;p&gt;As a final step, you'll need to setup a passwordless SSH between your host and the Nano. To do this, you'll need to create an SSH public-private key pair and configure your Nano to trust your public key.&lt;/p&gt;&lt;p&gt;To setup your local SSH key in Windows run:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Powershell"&gt;Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0
ssh-keygen -t rsa -b 4096 
&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;The keys will be created here: %USERPROFILE%\.ssh&lt;/p&gt;&lt;p&gt;To copy to the Nano your public key:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-CMD"&gt;SET REMOTEHOST=user@device
scp %USERPROFILE%\.ssh\id_rsa.pub %REMOTEHOST%:~/tmp.pub
ssh %REMOTEHOST% "mkdir -p ~/.ssh &amp;amp;&amp;amp; chmod 700 ~/.ssh &amp;amp;&amp;amp; cat ~/tmp.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 ~/.ssh/authorized_keys &amp;amp;&amp;amp; rm -f ~/tmp.pub"&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;blockquote&gt;
&lt;p&gt;You'll need to replace the value &lt;strong&gt;user@device&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;p&gt;In you host VSCode, hit F1 and type &lt;em&gt;Remote-SSH: Open Configuration File..&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Add your configuration:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Remote-SSH config"&gt;Host Nano
    User user
    HostName device
    IdentityFile ~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;blockquote&gt;
&lt;p&gt;Replace the values &lt;strong&gt;user&lt;/strong&gt; and &lt;strong&gt;device&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;p&gt;Connect to your Nano clicking the low left corner green icon:&lt;/p&gt;&lt;!--kg-card-begin: image--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2019/09/image-1.png" class="kg-image" alt="Got Nano, Wanna Code"&gt;&lt;/figure&gt;&lt;!--kg-card-end: image--&gt;&lt;p&gt;Congrats! Once connected, you can open a remote folder and open remote terminals directly in VSCode.&lt;/p&gt;&lt;h3 id="step-2-x-forwarding"&gt;Step 2: X forwarding&lt;/h3&gt;&lt;p&gt;What about applications that have a GUI? No worries, you can setup an X forwarding from Nano to your host. To do this, I'm using the &lt;a href="https://token2shell.com/x410/"&gt;&lt;strong&gt;X410 server&lt;/strong&gt;&lt;/a&gt; for Windows. After installing and running the server, make sure you allow public access.&lt;/p&gt;&lt;!--kg-card-begin: image--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2019/09/image-2.png" class="kg-image" alt="Got Nano, Wanna Code"&gt;&lt;/figure&gt;&lt;!--kg-card-end: image--&gt;&lt;p&gt;All is left to do is to configure the X Forwarding on your Nano device.&lt;/p&gt;&lt;p&gt;Open a terminal in VSCode (&lt;strong&gt;Ctrl+Shift+`&lt;/strong&gt; on Windows) and run:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Remote-SSH config"&gt;export DISPLAY=10.135.62.79:0.0&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;blockquote&gt;
&lt;p&gt;Make sure you replace the above IP with your host IP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--kg-card-end: markdown--&gt;&lt;p&gt; To verify everything works, from the terminal run:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-Remote-SSH config"&gt;eog&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;If all goes well, you should see this window:&lt;/p&gt;&lt;!--kg-card-begin: image--&gt;&lt;figure class="kg-card kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2019/09/image-3.png" class="kg-image" alt="Got Nano, Wanna Code"&gt;&lt;/figure&gt;&lt;!--kg-card-end: image--&gt;&lt;p&gt;To automatically set the remote variable when debugging your app, you can modify your&lt;strong&gt; launch.json &lt;/strong&gt;and set the variable there:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-launch.json"&gt;{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal", 
            "env":
            {
            "DISPLAY": "10.135.62.79:0.0" 
            }
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;To test all this, create a new python file containing the following code:&lt;/p&gt;&lt;!--kg-card-begin: code--&gt;&lt;pre&gt;&lt;code class="language-test.py"&gt;import subprocess
subprocess.run(["eog"])&lt;/code&gt;&lt;/pre&gt;&lt;!--kg-card-end: code--&gt;&lt;p&gt;Now you can hit &lt;strong&gt;F5 &lt;/strong&gt;and you'll get the same development experience, as with your local host, but&lt;strong&gt; running on a remote ARM machine!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;What we have achieved: &lt;/strong&gt;&lt;u&gt;We can now do remote development from a Windows host to a Jetson Nano, using VSCode.&lt;/u&gt;&lt;/p&gt;</content:encoded></item></channel></rss>